// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/v1/dishes.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UpdateDishesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDishesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDishesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDishesResponseMultiError, or nil if none found.
func (m *UpdateDishesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDishesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDishes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDishesResponseValidationError{
					field:  "Dishes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDishesResponseValidationError{
					field:  "Dishes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDishes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDishesResponseValidationError{
				field:  "Dishes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateDishesResponseMultiError(errors)
	}

	return nil
}

// UpdateDishesResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateDishesResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateDishesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDishesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDishesResponseMultiError) AllErrors() []error { return m }

// UpdateDishesResponseValidationError is the validation error returned by
// UpdateDishesResponse.Validate if the designated constraints aren't met.
type UpdateDishesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDishesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDishesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDishesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDishesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDishesResponseValidationError) ErrorName() string {
	return "UpdateDishesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDishesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDishesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDishesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDishesResponseValidationError{}

// Validate checks the field values on UpdateDishesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDishesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDishesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDishesRequestMultiError, or nil if none found.
func (m *UpdateDishesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDishesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := UpdateDishesRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 5 {
		err := UpdateDishesRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 5 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetLogo()) < 1 {
		err := UpdateDishesRequestValidationError{
			field:  "Logo",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRemark()) < 1 {
		err := UpdateDishesRequestValidationError{
			field:  "Remark",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateDishesRequestMultiError(errors)
	}

	return nil
}

// UpdateDishesRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateDishesRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateDishesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDishesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDishesRequestMultiError) AllErrors() []error { return m }

// UpdateDishesRequestValidationError is the validation error returned by
// UpdateDishesRequest.Validate if the designated constraints aren't met.
type UpdateDishesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDishesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDishesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDishesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDishesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDishesRequestValidationError) ErrorName() string {
	return "UpdateDishesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDishesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDishesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDishesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDishesRequestValidationError{}

// Validate checks the field values on DelDishesResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DelDishesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelDishesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelDishesResponseMultiError, or nil if none found.
func (m *DelDishesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DelDishesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DelDishesResponseMultiError(errors)
	}

	return nil
}

// DelDishesResponseMultiError is an error wrapping multiple validation errors
// returned by DelDishesResponse.ValidateAll() if the designated constraints
// aren't met.
type DelDishesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelDishesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelDishesResponseMultiError) AllErrors() []error { return m }

// DelDishesResponseValidationError is the validation error returned by
// DelDishesResponse.Validate if the designated constraints aren't met.
type DelDishesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelDishesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelDishesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelDishesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelDishesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelDishesResponseValidationError) ErrorName() string {
	return "DelDishesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DelDishesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelDishesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelDishesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelDishesResponseValidationError{}

// Validate checks the field values on DelDishesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DelDishesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelDishesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelDishesRequestMultiError, or nil if none found.
func (m *DelDishesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DelDishesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 0 {
		err := DelDishesRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 0 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DelDishesRequestMultiError(errors)
	}

	return nil
}

// DelDishesRequestMultiError is an error wrapping multiple validation errors
// returned by DelDishesRequest.ValidateAll() if the designated constraints
// aren't met.
type DelDishesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelDishesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelDishesRequestMultiError) AllErrors() []error { return m }

// DelDishesRequestValidationError is the validation error returned by
// DelDishesRequest.Validate if the designated constraints aren't met.
type DelDishesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelDishesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelDishesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelDishesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelDishesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelDishesRequestValidationError) ErrorName() string { return "DelDishesRequestValidationError" }

// Error satisfies the builtin error interface
func (e DelDishesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelDishesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelDishesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelDishesRequestValidationError{}

// Validate checks the field values on GetDishesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetDishesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDishesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDishesRequestMultiError, or nil if none found.
func (m *GetDishesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDishesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := GetDishesRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetDishesRequestMultiError(errors)
	}

	return nil
}

// GetDishesRequestMultiError is an error wrapping multiple validation errors
// returned by GetDishesRequest.ValidateAll() if the designated constraints
// aren't met.
type GetDishesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDishesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDishesRequestMultiError) AllErrors() []error { return m }

// GetDishesRequestValidationError is the validation error returned by
// GetDishesRequest.Validate if the designated constraints aren't met.
type GetDishesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDishesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDishesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDishesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDishesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDishesRequestValidationError) ErrorName() string { return "GetDishesRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetDishesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDishesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDishesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDishesRequestValidationError{}

// Validate checks the field values on GetDishesResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetDishesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDishesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDishesResponseMultiError, or nil if none found.
func (m *GetDishesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDishesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDishes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDishesResponseValidationError{
					field:  "Dishes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDishesResponseValidationError{
					field:  "Dishes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDishes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDishesResponseValidationError{
				field:  "Dishes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDishesResponseMultiError(errors)
	}

	return nil
}

// GetDishesResponseMultiError is an error wrapping multiple validation errors
// returned by GetDishesResponse.ValidateAll() if the designated constraints
// aren't met.
type GetDishesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDishesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDishesResponseMultiError) AllErrors() []error { return m }

// GetDishesResponseValidationError is the validation error returned by
// GetDishesResponse.Validate if the designated constraints aren't met.
type GetDishesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDishesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDishesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDishesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDishesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDishesResponseValidationError) ErrorName() string {
	return "GetDishesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDishesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDishesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDishesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDishesResponseValidationError{}

// Validate checks the field values on ListDishesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDishesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDishesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDishesResponseMultiError, or nil if none found.
func (m *ListDishesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDishesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDishes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDishesResponseValidationError{
						field:  fmt.Sprintf("Dishes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDishesResponseValidationError{
						field:  fmt.Sprintf("Dishes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDishesResponseValidationError{
					field:  fmt.Sprintf("Dishes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListDishesResponseMultiError(errors)
	}

	return nil
}

// ListDishesResponseMultiError is an error wrapping multiple validation errors
// returned by ListDishesResponse.ValidateAll() if the designated constraints
// aren't met.
type ListDishesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDishesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDishesResponseMultiError) AllErrors() []error { return m }

// ListDishesResponseValidationError is the validation error returned by
// ListDishesResponse.Validate if the designated constraints aren't met.
type ListDishesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDishesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDishesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDishesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDishesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDishesResponseValidationError) ErrorName() string {
	return "ListDishesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListDishesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDishesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDishesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDishesResponseValidationError{}

// Validate checks the field values on ListDishesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListDishesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDishesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDishesRequestMultiError, or nil if none found.
func (m *ListDishesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDishesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if m.GetPageIndex() <= 0 {
		err := ListDishesRequestValidationError{
			field:  "PageIndex",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() < 1 {
		err := ListDishesRequestValidationError{
			field:  "PageSize",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListDishesRequestMultiError(errors)
	}

	return nil
}

// ListDishesRequestMultiError is an error wrapping multiple validation errors
// returned by ListDishesRequest.ValidateAll() if the designated constraints
// aren't met.
type ListDishesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDishesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDishesRequestMultiError) AllErrors() []error { return m }

// ListDishesRequestValidationError is the validation error returned by
// ListDishesRequest.Validate if the designated constraints aren't met.
type ListDishesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDishesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDishesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDishesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDishesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDishesRequestValidationError) ErrorName() string {
	return "ListDishesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDishesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDishesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDishesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDishesRequestValidationError{}

// Validate checks the field values on CreateDishesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDishesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDishesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDishesRequestMultiError, or nil if none found.
func (m *CreateDishesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDishesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 5 {
		err := CreateDishesRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 5 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetLogo()) < 1 {
		err := CreateDishesRequestValidationError{
			field:  "Logo",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Remark

	if len(errors) > 0 {
		return CreateDishesRequestMultiError(errors)
	}

	return nil
}

// CreateDishesRequestMultiError is an error wrapping multiple validation
// errors returned by CreateDishesRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateDishesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDishesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDishesRequestMultiError) AllErrors() []error { return m }

// CreateDishesRequestValidationError is the validation error returned by
// CreateDishesRequest.Validate if the designated constraints aren't met.
type CreateDishesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDishesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDishesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDishesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDishesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDishesRequestValidationError) ErrorName() string {
	return "CreateDishesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDishesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDishesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDishesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDishesRequestValidationError{}

// Validate checks the field values on CreateDishesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDishesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDishesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDishesResponseMultiError, or nil if none found.
func (m *CreateDishesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDishesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDishes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDishesResponseValidationError{
					field:  "Dishes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDishesResponseValidationError{
					field:  "Dishes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDishes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDishesResponseValidationError{
				field:  "Dishes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateDishesResponseMultiError(errors)
	}

	return nil
}

// CreateDishesResponseMultiError is an error wrapping multiple validation
// errors returned by CreateDishesResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateDishesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDishesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDishesResponseMultiError) AllErrors() []error { return m }

// CreateDishesResponseValidationError is the validation error returned by
// CreateDishesResponse.Validate if the designated constraints aren't met.
type CreateDishesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDishesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDishesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDishesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDishesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDishesResponseValidationError) ErrorName() string {
	return "CreateDishesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDishesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDishesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDishesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDishesResponseValidationError{}
