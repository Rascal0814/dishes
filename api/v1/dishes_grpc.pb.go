// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api/v1/dishes.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DishesService_CreateDishes_FullMethodName = "/v1.DishesService/CreateDishes"
	DishesService_GetDishes_FullMethodName    = "/v1.DishesService/GetDishes"
	DishesService_DelDishes_FullMethodName    = "/v1.DishesService/DelDishes"
	DishesService_UpdateDishes_FullMethodName = "/v1.DishesService/UpdateDishes"
	DishesService_ListDishes_FullMethodName   = "/v1.DishesService/ListDishes"
)

// DishesServiceClient is the client API for DishesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DishesServiceClient interface {
	CreateDishes(ctx context.Context, in *CreateDishesRequest, opts ...grpc.CallOption) (*CreateDishesResponse, error)
	GetDishes(ctx context.Context, in *GetDishesRequest, opts ...grpc.CallOption) (*GetDishesResponse, error)
	DelDishes(ctx context.Context, in *DelDishesRequest, opts ...grpc.CallOption) (*DelDishesResponse, error)
	UpdateDishes(ctx context.Context, in *UpdateDishesRequest, opts ...grpc.CallOption) (*UpdateDishesResponse, error)
	ListDishes(ctx context.Context, in *ListDishesRequest, opts ...grpc.CallOption) (*ListDishesResponse, error)
}

type dishesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDishesServiceClient(cc grpc.ClientConnInterface) DishesServiceClient {
	return &dishesServiceClient{cc}
}

func (c *dishesServiceClient) CreateDishes(ctx context.Context, in *CreateDishesRequest, opts ...grpc.CallOption) (*CreateDishesResponse, error) {
	out := new(CreateDishesResponse)
	err := c.cc.Invoke(ctx, DishesService_CreateDishes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dishesServiceClient) GetDishes(ctx context.Context, in *GetDishesRequest, opts ...grpc.CallOption) (*GetDishesResponse, error) {
	out := new(GetDishesResponse)
	err := c.cc.Invoke(ctx, DishesService_GetDishes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dishesServiceClient) DelDishes(ctx context.Context, in *DelDishesRequest, opts ...grpc.CallOption) (*DelDishesResponse, error) {
	out := new(DelDishesResponse)
	err := c.cc.Invoke(ctx, DishesService_DelDishes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dishesServiceClient) UpdateDishes(ctx context.Context, in *UpdateDishesRequest, opts ...grpc.CallOption) (*UpdateDishesResponse, error) {
	out := new(UpdateDishesResponse)
	err := c.cc.Invoke(ctx, DishesService_UpdateDishes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dishesServiceClient) ListDishes(ctx context.Context, in *ListDishesRequest, opts ...grpc.CallOption) (*ListDishesResponse, error) {
	out := new(ListDishesResponse)
	err := c.cc.Invoke(ctx, DishesService_ListDishes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DishesServiceServer is the server API for DishesService service.
// All implementations must embed UnimplementedDishesServiceServer
// for forward compatibility
type DishesServiceServer interface {
	CreateDishes(context.Context, *CreateDishesRequest) (*CreateDishesResponse, error)
	GetDishes(context.Context, *GetDishesRequest) (*GetDishesResponse, error)
	DelDishes(context.Context, *DelDishesRequest) (*DelDishesResponse, error)
	UpdateDishes(context.Context, *UpdateDishesRequest) (*UpdateDishesResponse, error)
	ListDishes(context.Context, *ListDishesRequest) (*ListDishesResponse, error)
	mustEmbedUnimplementedDishesServiceServer()
}

// UnimplementedDishesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDishesServiceServer struct {
}

func (UnimplementedDishesServiceServer) CreateDishes(context.Context, *CreateDishesRequest) (*CreateDishesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDishes not implemented")
}
func (UnimplementedDishesServiceServer) GetDishes(context.Context, *GetDishesRequest) (*GetDishesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDishes not implemented")
}
func (UnimplementedDishesServiceServer) DelDishes(context.Context, *DelDishesRequest) (*DelDishesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelDishes not implemented")
}
func (UnimplementedDishesServiceServer) UpdateDishes(context.Context, *UpdateDishesRequest) (*UpdateDishesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDishes not implemented")
}
func (UnimplementedDishesServiceServer) ListDishes(context.Context, *ListDishesRequest) (*ListDishesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDishes not implemented")
}
func (UnimplementedDishesServiceServer) mustEmbedUnimplementedDishesServiceServer() {}

// UnsafeDishesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DishesServiceServer will
// result in compilation errors.
type UnsafeDishesServiceServer interface {
	mustEmbedUnimplementedDishesServiceServer()
}

func RegisterDishesServiceServer(s grpc.ServiceRegistrar, srv DishesServiceServer) {
	s.RegisterService(&DishesService_ServiceDesc, srv)
}

func _DishesService_CreateDishes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDishesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DishesServiceServer).CreateDishes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DishesService_CreateDishes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DishesServiceServer).CreateDishes(ctx, req.(*CreateDishesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DishesService_GetDishes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDishesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DishesServiceServer).GetDishes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DishesService_GetDishes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DishesServiceServer).GetDishes(ctx, req.(*GetDishesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DishesService_DelDishes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelDishesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DishesServiceServer).DelDishes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DishesService_DelDishes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DishesServiceServer).DelDishes(ctx, req.(*DelDishesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DishesService_UpdateDishes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDishesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DishesServiceServer).UpdateDishes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DishesService_UpdateDishes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DishesServiceServer).UpdateDishes(ctx, req.(*UpdateDishesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DishesService_ListDishes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDishesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DishesServiceServer).ListDishes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DishesService_ListDishes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DishesServiceServer).ListDishes(ctx, req.(*ListDishesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DishesService_ServiceDesc is the grpc.ServiceDesc for DishesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DishesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.DishesService",
	HandlerType: (*DishesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDishes",
			Handler:    _DishesService_CreateDishes_Handler,
		},
		{
			MethodName: "GetDishes",
			Handler:    _DishesService_GetDishes_Handler,
		},
		{
			MethodName: "DelDishes",
			Handler:    _DishesService_DelDishes_Handler,
		},
		{
			MethodName: "UpdateDishes",
			Handler:    _DishesService_UpdateDishes_Handler,
		},
		{
			MethodName: "ListDishes",
			Handler:    _DishesService_ListDishes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/dishes.proto",
}
