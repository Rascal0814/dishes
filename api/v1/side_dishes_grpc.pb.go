// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api/v1/side_dishes.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SideDishesService_CreateSideDishes_FullMethodName = "/v1.SideDishesService/CreateSideDishes"
	SideDishesService_UpdateSideDishes_FullMethodName = "/v1.SideDishesService/UpdateSideDishes"
	SideDishesService_GetSideDishes_FullMethodName    = "/v1.SideDishesService/GetSideDishes"
	SideDishesService_DelSideDishes_FullMethodName    = "/v1.SideDishesService/DelSideDishes"
)

// SideDishesServiceClient is the client API for SideDishesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SideDishesServiceClient interface {
	CreateSideDishes(ctx context.Context, in *CreateSideDishesRequest, opts ...grpc.CallOption) (*CreateSideDishesResponse, error)
	UpdateSideDishes(ctx context.Context, in *UpdateSideDishesRequest, opts ...grpc.CallOption) (*UpdateSideDishesResponse, error)
	GetSideDishes(ctx context.Context, in *GetSideDishesRequest, opts ...grpc.CallOption) (*GetSideDishesResponse, error)
	DelSideDishes(ctx context.Context, in *DelSideDishesRequest, opts ...grpc.CallOption) (*DelSideDishesResponse, error)
}

type sideDishesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSideDishesServiceClient(cc grpc.ClientConnInterface) SideDishesServiceClient {
	return &sideDishesServiceClient{cc}
}

func (c *sideDishesServiceClient) CreateSideDishes(ctx context.Context, in *CreateSideDishesRequest, opts ...grpc.CallOption) (*CreateSideDishesResponse, error) {
	out := new(CreateSideDishesResponse)
	err := c.cc.Invoke(ctx, SideDishesService_CreateSideDishes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sideDishesServiceClient) UpdateSideDishes(ctx context.Context, in *UpdateSideDishesRequest, opts ...grpc.CallOption) (*UpdateSideDishesResponse, error) {
	out := new(UpdateSideDishesResponse)
	err := c.cc.Invoke(ctx, SideDishesService_UpdateSideDishes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sideDishesServiceClient) GetSideDishes(ctx context.Context, in *GetSideDishesRequest, opts ...grpc.CallOption) (*GetSideDishesResponse, error) {
	out := new(GetSideDishesResponse)
	err := c.cc.Invoke(ctx, SideDishesService_GetSideDishes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sideDishesServiceClient) DelSideDishes(ctx context.Context, in *DelSideDishesRequest, opts ...grpc.CallOption) (*DelSideDishesResponse, error) {
	out := new(DelSideDishesResponse)
	err := c.cc.Invoke(ctx, SideDishesService_DelSideDishes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SideDishesServiceServer is the server API for SideDishesService service.
// All implementations must embed UnimplementedSideDishesServiceServer
// for forward compatibility
type SideDishesServiceServer interface {
	CreateSideDishes(context.Context, *CreateSideDishesRequest) (*CreateSideDishesResponse, error)
	UpdateSideDishes(context.Context, *UpdateSideDishesRequest) (*UpdateSideDishesResponse, error)
	GetSideDishes(context.Context, *GetSideDishesRequest) (*GetSideDishesResponse, error)
	DelSideDishes(context.Context, *DelSideDishesRequest) (*DelSideDishesResponse, error)
	mustEmbedUnimplementedSideDishesServiceServer()
}

// UnimplementedSideDishesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSideDishesServiceServer struct {
}

func (UnimplementedSideDishesServiceServer) CreateSideDishes(context.Context, *CreateSideDishesRequest) (*CreateSideDishesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSideDishes not implemented")
}
func (UnimplementedSideDishesServiceServer) UpdateSideDishes(context.Context, *UpdateSideDishesRequest) (*UpdateSideDishesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSideDishes not implemented")
}
func (UnimplementedSideDishesServiceServer) GetSideDishes(context.Context, *GetSideDishesRequest) (*GetSideDishesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSideDishes not implemented")
}
func (UnimplementedSideDishesServiceServer) DelSideDishes(context.Context, *DelSideDishesRequest) (*DelSideDishesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelSideDishes not implemented")
}
func (UnimplementedSideDishesServiceServer) mustEmbedUnimplementedSideDishesServiceServer() {}

// UnsafeSideDishesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SideDishesServiceServer will
// result in compilation errors.
type UnsafeSideDishesServiceServer interface {
	mustEmbedUnimplementedSideDishesServiceServer()
}

func RegisterSideDishesServiceServer(s grpc.ServiceRegistrar, srv SideDishesServiceServer) {
	s.RegisterService(&SideDishesService_ServiceDesc, srv)
}

func _SideDishesService_CreateSideDishes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSideDishesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SideDishesServiceServer).CreateSideDishes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SideDishesService_CreateSideDishes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SideDishesServiceServer).CreateSideDishes(ctx, req.(*CreateSideDishesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SideDishesService_UpdateSideDishes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSideDishesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SideDishesServiceServer).UpdateSideDishes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SideDishesService_UpdateSideDishes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SideDishesServiceServer).UpdateSideDishes(ctx, req.(*UpdateSideDishesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SideDishesService_GetSideDishes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSideDishesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SideDishesServiceServer).GetSideDishes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SideDishesService_GetSideDishes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SideDishesServiceServer).GetSideDishes(ctx, req.(*GetSideDishesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SideDishesService_DelSideDishes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelSideDishesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SideDishesServiceServer).DelSideDishes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SideDishesService_DelSideDishes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SideDishesServiceServer).DelSideDishes(ctx, req.(*DelSideDishesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SideDishesService_ServiceDesc is the grpc.ServiceDesc for SideDishesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SideDishesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.SideDishesService",
	HandlerType: (*SideDishesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSideDishes",
			Handler:    _SideDishesService_CreateSideDishes_Handler,
		},
		{
			MethodName: "UpdateSideDishes",
			Handler:    _SideDishesService_UpdateSideDishes_Handler,
		},
		{
			MethodName: "GetSideDishes",
			Handler:    _SideDishesService_GetSideDishes_Handler,
		},
		{
			MethodName: "DelSideDishes",
			Handler:    _SideDishesService_DelSideDishes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/side_dishes.proto",
}
