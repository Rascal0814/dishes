// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api/v1/make_steps.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MakeStepsService_CreateMakeSteps_FullMethodName      = "/v1.MakeStepsService/CreateMakeSteps"
	MakeStepsService_GetMakeSteps_FullMethodName         = "/v1.MakeStepsService/GetMakeSteps"
	MakeStepsService_DelMakeSteps_FullMethodName         = "/v1.MakeStepsService/DelMakeSteps"
	MakeStepsService_DelMakeStepsByDishId_FullMethodName = "/v1.MakeStepsService/DelMakeStepsByDishId"
	MakeStepsService_UpdateMakeSteps_FullMethodName      = "/v1.MakeStepsService/UpdateMakeSteps"
	MakeStepsService_GetDishesMakeSteps_FullMethodName   = "/v1.MakeStepsService/GetDishesMakeSteps"
)

// MakeStepsServiceClient is the client API for MakeStepsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MakeStepsServiceClient interface {
	CreateMakeSteps(ctx context.Context, in *CreateMakeStepsRequest, opts ...grpc.CallOption) (*CreateMakeStepsResponse, error)
	GetMakeSteps(ctx context.Context, in *GetMakeStepsRequest, opts ...grpc.CallOption) (*GetMakeStepsResponse, error)
	DelMakeSteps(ctx context.Context, in *DelMakeStepsRequest, opts ...grpc.CallOption) (*DelMakeStepsResponse, error)
	DelMakeStepsByDishId(ctx context.Context, in *DelMakeStepsByDishIdRequest, opts ...grpc.CallOption) (*DelMakeStepsByDishIdResponse, error)
	UpdateMakeSteps(ctx context.Context, in *UpdateMakeStepsRequest, opts ...grpc.CallOption) (*UpdateMakeStepsResponse, error)
	GetDishesMakeSteps(ctx context.Context, in *DishesMakeStepsRequest, opts ...grpc.CallOption) (*DishesMakeStepsResponse, error)
}

type makeStepsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMakeStepsServiceClient(cc grpc.ClientConnInterface) MakeStepsServiceClient {
	return &makeStepsServiceClient{cc}
}

func (c *makeStepsServiceClient) CreateMakeSteps(ctx context.Context, in *CreateMakeStepsRequest, opts ...grpc.CallOption) (*CreateMakeStepsResponse, error) {
	out := new(CreateMakeStepsResponse)
	err := c.cc.Invoke(ctx, MakeStepsService_CreateMakeSteps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *makeStepsServiceClient) GetMakeSteps(ctx context.Context, in *GetMakeStepsRequest, opts ...grpc.CallOption) (*GetMakeStepsResponse, error) {
	out := new(GetMakeStepsResponse)
	err := c.cc.Invoke(ctx, MakeStepsService_GetMakeSteps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *makeStepsServiceClient) DelMakeSteps(ctx context.Context, in *DelMakeStepsRequest, opts ...grpc.CallOption) (*DelMakeStepsResponse, error) {
	out := new(DelMakeStepsResponse)
	err := c.cc.Invoke(ctx, MakeStepsService_DelMakeSteps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *makeStepsServiceClient) DelMakeStepsByDishId(ctx context.Context, in *DelMakeStepsByDishIdRequest, opts ...grpc.CallOption) (*DelMakeStepsByDishIdResponse, error) {
	out := new(DelMakeStepsByDishIdResponse)
	err := c.cc.Invoke(ctx, MakeStepsService_DelMakeStepsByDishId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *makeStepsServiceClient) UpdateMakeSteps(ctx context.Context, in *UpdateMakeStepsRequest, opts ...grpc.CallOption) (*UpdateMakeStepsResponse, error) {
	out := new(UpdateMakeStepsResponse)
	err := c.cc.Invoke(ctx, MakeStepsService_UpdateMakeSteps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *makeStepsServiceClient) GetDishesMakeSteps(ctx context.Context, in *DishesMakeStepsRequest, opts ...grpc.CallOption) (*DishesMakeStepsResponse, error) {
	out := new(DishesMakeStepsResponse)
	err := c.cc.Invoke(ctx, MakeStepsService_GetDishesMakeSteps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MakeStepsServiceServer is the server API for MakeStepsService service.
// All implementations must embed UnimplementedMakeStepsServiceServer
// for forward compatibility
type MakeStepsServiceServer interface {
	CreateMakeSteps(context.Context, *CreateMakeStepsRequest) (*CreateMakeStepsResponse, error)
	GetMakeSteps(context.Context, *GetMakeStepsRequest) (*GetMakeStepsResponse, error)
	DelMakeSteps(context.Context, *DelMakeStepsRequest) (*DelMakeStepsResponse, error)
	DelMakeStepsByDishId(context.Context, *DelMakeStepsByDishIdRequest) (*DelMakeStepsByDishIdResponse, error)
	UpdateMakeSteps(context.Context, *UpdateMakeStepsRequest) (*UpdateMakeStepsResponse, error)
	GetDishesMakeSteps(context.Context, *DishesMakeStepsRequest) (*DishesMakeStepsResponse, error)
	mustEmbedUnimplementedMakeStepsServiceServer()
}

// UnimplementedMakeStepsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMakeStepsServiceServer struct {
}

func (UnimplementedMakeStepsServiceServer) CreateMakeSteps(context.Context, *CreateMakeStepsRequest) (*CreateMakeStepsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMakeSteps not implemented")
}
func (UnimplementedMakeStepsServiceServer) GetMakeSteps(context.Context, *GetMakeStepsRequest) (*GetMakeStepsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMakeSteps not implemented")
}
func (UnimplementedMakeStepsServiceServer) DelMakeSteps(context.Context, *DelMakeStepsRequest) (*DelMakeStepsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelMakeSteps not implemented")
}
func (UnimplementedMakeStepsServiceServer) DelMakeStepsByDishId(context.Context, *DelMakeStepsByDishIdRequest) (*DelMakeStepsByDishIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelMakeStepsByDishId not implemented")
}
func (UnimplementedMakeStepsServiceServer) UpdateMakeSteps(context.Context, *UpdateMakeStepsRequest) (*UpdateMakeStepsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMakeSteps not implemented")
}
func (UnimplementedMakeStepsServiceServer) GetDishesMakeSteps(context.Context, *DishesMakeStepsRequest) (*DishesMakeStepsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDishesMakeSteps not implemented")
}
func (UnimplementedMakeStepsServiceServer) mustEmbedUnimplementedMakeStepsServiceServer() {}

// UnsafeMakeStepsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MakeStepsServiceServer will
// result in compilation errors.
type UnsafeMakeStepsServiceServer interface {
	mustEmbedUnimplementedMakeStepsServiceServer()
}

func RegisterMakeStepsServiceServer(s grpc.ServiceRegistrar, srv MakeStepsServiceServer) {
	s.RegisterService(&MakeStepsService_ServiceDesc, srv)
}

func _MakeStepsService_CreateMakeSteps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMakeStepsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MakeStepsServiceServer).CreateMakeSteps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MakeStepsService_CreateMakeSteps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MakeStepsServiceServer).CreateMakeSteps(ctx, req.(*CreateMakeStepsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MakeStepsService_GetMakeSteps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMakeStepsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MakeStepsServiceServer).GetMakeSteps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MakeStepsService_GetMakeSteps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MakeStepsServiceServer).GetMakeSteps(ctx, req.(*GetMakeStepsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MakeStepsService_DelMakeSteps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelMakeStepsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MakeStepsServiceServer).DelMakeSteps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MakeStepsService_DelMakeSteps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MakeStepsServiceServer).DelMakeSteps(ctx, req.(*DelMakeStepsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MakeStepsService_DelMakeStepsByDishId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelMakeStepsByDishIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MakeStepsServiceServer).DelMakeStepsByDishId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MakeStepsService_DelMakeStepsByDishId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MakeStepsServiceServer).DelMakeStepsByDishId(ctx, req.(*DelMakeStepsByDishIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MakeStepsService_UpdateMakeSteps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMakeStepsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MakeStepsServiceServer).UpdateMakeSteps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MakeStepsService_UpdateMakeSteps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MakeStepsServiceServer).UpdateMakeSteps(ctx, req.(*UpdateMakeStepsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MakeStepsService_GetDishesMakeSteps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DishesMakeStepsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MakeStepsServiceServer).GetDishesMakeSteps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MakeStepsService_GetDishesMakeSteps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MakeStepsServiceServer).GetDishesMakeSteps(ctx, req.(*DishesMakeStepsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MakeStepsService_ServiceDesc is the grpc.ServiceDesc for MakeStepsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MakeStepsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.MakeStepsService",
	HandlerType: (*MakeStepsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMakeSteps",
			Handler:    _MakeStepsService_CreateMakeSteps_Handler,
		},
		{
			MethodName: "GetMakeSteps",
			Handler:    _MakeStepsService_GetMakeSteps_Handler,
		},
		{
			MethodName: "DelMakeSteps",
			Handler:    _MakeStepsService_DelMakeSteps_Handler,
		},
		{
			MethodName: "DelMakeStepsByDishId",
			Handler:    _MakeStepsService_DelMakeStepsByDishId_Handler,
		},
		{
			MethodName: "UpdateMakeSteps",
			Handler:    _MakeStepsService_UpdateMakeSteps_Handler,
		},
		{
			MethodName: "GetDishesMakeSteps",
			Handler:    _MakeStepsService_GetDishesMakeSteps_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/make_steps.proto",
}
