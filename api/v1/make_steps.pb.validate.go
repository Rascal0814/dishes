// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/v1/make_steps.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DelMakeStepsByDishIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelMakeStepsByDishIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelMakeStepsByDishIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelMakeStepsByDishIdRequestMultiError, or nil if none found.
func (m *DelMakeStepsByDishIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DelMakeStepsByDishIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDishId()) < 1 {
		err := DelMakeStepsByDishIdRequestValidationError{
			field:  "DishId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DelMakeStepsByDishIdRequestMultiError(errors)
	}

	return nil
}

// DelMakeStepsByDishIdRequestMultiError is an error wrapping multiple
// validation errors returned by DelMakeStepsByDishIdRequest.ValidateAll() if
// the designated constraints aren't met.
type DelMakeStepsByDishIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelMakeStepsByDishIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelMakeStepsByDishIdRequestMultiError) AllErrors() []error { return m }

// DelMakeStepsByDishIdRequestValidationError is the validation error returned
// by DelMakeStepsByDishIdRequest.Validate if the designated constraints
// aren't met.
type DelMakeStepsByDishIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelMakeStepsByDishIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelMakeStepsByDishIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelMakeStepsByDishIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelMakeStepsByDishIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelMakeStepsByDishIdRequestValidationError) ErrorName() string {
	return "DelMakeStepsByDishIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DelMakeStepsByDishIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelMakeStepsByDishIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelMakeStepsByDishIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelMakeStepsByDishIdRequestValidationError{}

// Validate checks the field values on DelMakeStepsByDishIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelMakeStepsByDishIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelMakeStepsByDishIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelMakeStepsByDishIdResponseMultiError, or nil if none found.
func (m *DelMakeStepsByDishIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DelMakeStepsByDishIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DelMakeStepsByDishIdResponseMultiError(errors)
	}

	return nil
}

// DelMakeStepsByDishIdResponseMultiError is an error wrapping multiple
// validation errors returned by DelMakeStepsByDishIdResponse.ValidateAll() if
// the designated constraints aren't met.
type DelMakeStepsByDishIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelMakeStepsByDishIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelMakeStepsByDishIdResponseMultiError) AllErrors() []error { return m }

// DelMakeStepsByDishIdResponseValidationError is the validation error returned
// by DelMakeStepsByDishIdResponse.Validate if the designated constraints
// aren't met.
type DelMakeStepsByDishIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelMakeStepsByDishIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelMakeStepsByDishIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelMakeStepsByDishIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelMakeStepsByDishIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelMakeStepsByDishIdResponseValidationError) ErrorName() string {
	return "DelMakeStepsByDishIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DelMakeStepsByDishIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelMakeStepsByDishIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelMakeStepsByDishIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelMakeStepsByDishIdResponseValidationError{}

// Validate checks the field values on UpdateMakeStepsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateMakeStepsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateMakeStepsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateMakeStepsResponseMultiError, or nil if none found.
func (m *UpdateMakeStepsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateMakeStepsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMakeStep()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateMakeStepsResponseValidationError{
					field:  "MakeStep",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateMakeStepsResponseValidationError{
					field:  "MakeStep",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMakeStep()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateMakeStepsResponseValidationError{
				field:  "MakeStep",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateMakeStepsResponseMultiError(errors)
	}

	return nil
}

// UpdateMakeStepsResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateMakeStepsResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateMakeStepsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMakeStepsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMakeStepsResponseMultiError) AllErrors() []error { return m }

// UpdateMakeStepsResponseValidationError is the validation error returned by
// UpdateMakeStepsResponse.Validate if the designated constraints aren't met.
type UpdateMakeStepsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMakeStepsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMakeStepsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMakeStepsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMakeStepsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMakeStepsResponseValidationError) ErrorName() string {
	return "UpdateMakeStepsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMakeStepsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMakeStepsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMakeStepsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMakeStepsResponseValidationError{}

// Validate checks the field values on UpdateMakeStepsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateMakeStepsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateMakeStepsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateMakeStepsRequestMultiError, or nil if none found.
func (m *UpdateMakeStepsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateMakeStepsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := UpdateMakeStepsRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDishId()) < 1 {
		err := UpdateMakeStepsRequestValidationError{
			field:  "DishId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetStep() <= 0 {
		err := UpdateMakeStepsRequestValidationError{
			field:  "Step",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetContent()) < 1 {
		err := UpdateMakeStepsRequestValidationError{
			field:  "Content",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateMakeStepsRequestMultiError(errors)
	}

	return nil
}

// UpdateMakeStepsRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateMakeStepsRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateMakeStepsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMakeStepsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMakeStepsRequestMultiError) AllErrors() []error { return m }

// UpdateMakeStepsRequestValidationError is the validation error returned by
// UpdateMakeStepsRequest.Validate if the designated constraints aren't met.
type UpdateMakeStepsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMakeStepsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMakeStepsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMakeStepsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMakeStepsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMakeStepsRequestValidationError) ErrorName() string {
	return "UpdateMakeStepsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMakeStepsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMakeStepsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMakeStepsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMakeStepsRequestValidationError{}

// Validate checks the field values on DelMakeStepsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelMakeStepsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelMakeStepsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelMakeStepsResponseMultiError, or nil if none found.
func (m *DelMakeStepsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DelMakeStepsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DelMakeStepsResponseMultiError(errors)
	}

	return nil
}

// DelMakeStepsResponseMultiError is an error wrapping multiple validation
// errors returned by DelMakeStepsResponse.ValidateAll() if the designated
// constraints aren't met.
type DelMakeStepsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelMakeStepsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelMakeStepsResponseMultiError) AllErrors() []error { return m }

// DelMakeStepsResponseValidationError is the validation error returned by
// DelMakeStepsResponse.Validate if the designated constraints aren't met.
type DelMakeStepsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelMakeStepsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelMakeStepsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelMakeStepsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelMakeStepsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelMakeStepsResponseValidationError) ErrorName() string {
	return "DelMakeStepsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DelMakeStepsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelMakeStepsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelMakeStepsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelMakeStepsResponseValidationError{}

// Validate checks the field values on DelMakeStepsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelMakeStepsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelMakeStepsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelMakeStepsRequestMultiError, or nil if none found.
func (m *DelMakeStepsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DelMakeStepsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 0 {
		err := DelMakeStepsRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 0 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DelMakeStepsRequestMultiError(errors)
	}

	return nil
}

// DelMakeStepsRequestMultiError is an error wrapping multiple validation
// errors returned by DelMakeStepsRequest.ValidateAll() if the designated
// constraints aren't met.
type DelMakeStepsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelMakeStepsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelMakeStepsRequestMultiError) AllErrors() []error { return m }

// DelMakeStepsRequestValidationError is the validation error returned by
// DelMakeStepsRequest.Validate if the designated constraints aren't met.
type DelMakeStepsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelMakeStepsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelMakeStepsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelMakeStepsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelMakeStepsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelMakeStepsRequestValidationError) ErrorName() string {
	return "DelMakeStepsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DelMakeStepsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelMakeStepsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelMakeStepsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelMakeStepsRequestValidationError{}

// Validate checks the field values on GetMakeStepsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMakeStepsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMakeStepsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMakeStepsRequestMultiError, or nil if none found.
func (m *GetMakeStepsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMakeStepsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := GetMakeStepsRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetMakeStepsRequestMultiError(errors)
	}

	return nil
}

// GetMakeStepsRequestMultiError is an error wrapping multiple validation
// errors returned by GetMakeStepsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetMakeStepsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMakeStepsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMakeStepsRequestMultiError) AllErrors() []error { return m }

// GetMakeStepsRequestValidationError is the validation error returned by
// GetMakeStepsRequest.Validate if the designated constraints aren't met.
type GetMakeStepsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMakeStepsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMakeStepsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMakeStepsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMakeStepsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMakeStepsRequestValidationError) ErrorName() string {
	return "GetMakeStepsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMakeStepsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMakeStepsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMakeStepsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMakeStepsRequestValidationError{}

// Validate checks the field values on GetMakeStepsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMakeStepsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMakeStepsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMakeStepsResponseMultiError, or nil if none found.
func (m *GetMakeStepsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMakeStepsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMakeStep()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMakeStepsResponseValidationError{
					field:  "MakeStep",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMakeStepsResponseValidationError{
					field:  "MakeStep",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMakeStep()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMakeStepsResponseValidationError{
				field:  "MakeStep",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetMakeStepsResponseMultiError(errors)
	}

	return nil
}

// GetMakeStepsResponseMultiError is an error wrapping multiple validation
// errors returned by GetMakeStepsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetMakeStepsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMakeStepsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMakeStepsResponseMultiError) AllErrors() []error { return m }

// GetMakeStepsResponseValidationError is the validation error returned by
// GetMakeStepsResponse.Validate if the designated constraints aren't met.
type GetMakeStepsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMakeStepsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMakeStepsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMakeStepsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMakeStepsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMakeStepsResponseValidationError) ErrorName() string {
	return "GetMakeStepsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMakeStepsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMakeStepsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMakeStepsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMakeStepsResponseValidationError{}

// Validate checks the field values on DishesMakeStepsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DishesMakeStepsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DishesMakeStepsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DishesMakeStepsResponseMultiError, or nil if none found.
func (m *DishesMakeStepsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DishesMakeStepsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSteps() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DishesMakeStepsResponseValidationError{
						field:  fmt.Sprintf("Steps[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DishesMakeStepsResponseValidationError{
						field:  fmt.Sprintf("Steps[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DishesMakeStepsResponseValidationError{
					field:  fmt.Sprintf("Steps[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DishesMakeStepsResponseMultiError(errors)
	}

	return nil
}

// DishesMakeStepsResponseMultiError is an error wrapping multiple validation
// errors returned by DishesMakeStepsResponse.ValidateAll() if the designated
// constraints aren't met.
type DishesMakeStepsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DishesMakeStepsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DishesMakeStepsResponseMultiError) AllErrors() []error { return m }

// DishesMakeStepsResponseValidationError is the validation error returned by
// DishesMakeStepsResponse.Validate if the designated constraints aren't met.
type DishesMakeStepsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DishesMakeStepsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DishesMakeStepsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DishesMakeStepsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DishesMakeStepsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DishesMakeStepsResponseValidationError) ErrorName() string {
	return "DishesMakeStepsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DishesMakeStepsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDishesMakeStepsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DishesMakeStepsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DishesMakeStepsResponseValidationError{}

// Validate checks the field values on DishesMakeStepsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DishesMakeStepsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DishesMakeStepsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DishesMakeStepsRequestMultiError, or nil if none found.
func (m *DishesMakeStepsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DishesMakeStepsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DishId

	if len(errors) > 0 {
		return DishesMakeStepsRequestMultiError(errors)
	}

	return nil
}

// DishesMakeStepsRequestMultiError is an error wrapping multiple validation
// errors returned by DishesMakeStepsRequest.ValidateAll() if the designated
// constraints aren't met.
type DishesMakeStepsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DishesMakeStepsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DishesMakeStepsRequestMultiError) AllErrors() []error { return m }

// DishesMakeStepsRequestValidationError is the validation error returned by
// DishesMakeStepsRequest.Validate if the designated constraints aren't met.
type DishesMakeStepsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DishesMakeStepsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DishesMakeStepsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DishesMakeStepsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DishesMakeStepsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DishesMakeStepsRequestValidationError) ErrorName() string {
	return "DishesMakeStepsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DishesMakeStepsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDishesMakeStepsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DishesMakeStepsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DishesMakeStepsRequestValidationError{}

// Validate checks the field values on CreateMakeStepsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMakeStepsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMakeStepsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMakeStepsRequestMultiError, or nil if none found.
func (m *CreateMakeStepsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMakeStepsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDishId()) < 1 {
		err := CreateMakeStepsRequestValidationError{
			field:  "DishId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetSteps()) < 1 {
		err := CreateMakeStepsRequestValidationError{
			field:  "Steps",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetSteps() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateMakeStepsRequestValidationError{
						field:  fmt.Sprintf("Steps[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateMakeStepsRequestValidationError{
						field:  fmt.Sprintf("Steps[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateMakeStepsRequestValidationError{
					field:  fmt.Sprintf("Steps[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateMakeStepsRequestMultiError(errors)
	}

	return nil
}

// CreateMakeStepsRequestMultiError is an error wrapping multiple validation
// errors returned by CreateMakeStepsRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateMakeStepsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMakeStepsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMakeStepsRequestMultiError) AllErrors() []error { return m }

// CreateMakeStepsRequestValidationError is the validation error returned by
// CreateMakeStepsRequest.Validate if the designated constraints aren't met.
type CreateMakeStepsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMakeStepsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMakeStepsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMakeStepsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMakeStepsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMakeStepsRequestValidationError) ErrorName() string {
	return "CreateMakeStepsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMakeStepsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMakeStepsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMakeStepsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMakeStepsRequestValidationError{}

// Validate checks the field values on CreateMakeStep with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateMakeStep) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMakeStep with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateMakeStepMultiError,
// or nil if none found.
func (m *CreateMakeStep) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMakeStep) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetStep() <= 0 {
		err := CreateMakeStepValidationError{
			field:  "Step",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetContent()) < 1 {
		err := CreateMakeStepValidationError{
			field:  "Content",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateMakeStepMultiError(errors)
	}

	return nil
}

// CreateMakeStepMultiError is an error wrapping multiple validation errors
// returned by CreateMakeStep.ValidateAll() if the designated constraints
// aren't met.
type CreateMakeStepMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMakeStepMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMakeStepMultiError) AllErrors() []error { return m }

// CreateMakeStepValidationError is the validation error returned by
// CreateMakeStep.Validate if the designated constraints aren't met.
type CreateMakeStepValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMakeStepValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMakeStepValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMakeStepValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMakeStepValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMakeStepValidationError) ErrorName() string { return "CreateMakeStepValidationError" }

// Error satisfies the builtin error interface
func (e CreateMakeStepValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMakeStep.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMakeStepValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMakeStepValidationError{}

// Validate checks the field values on CreateMakeStepsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMakeStepsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMakeStepsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMakeStepsResponseMultiError, or nil if none found.
func (m *CreateMakeStepsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMakeStepsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSteps() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateMakeStepsResponseValidationError{
						field:  fmt.Sprintf("Steps[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateMakeStepsResponseValidationError{
						field:  fmt.Sprintf("Steps[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateMakeStepsResponseValidationError{
					field:  fmt.Sprintf("Steps[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateMakeStepsResponseMultiError(errors)
	}

	return nil
}

// CreateMakeStepsResponseMultiError is an error wrapping multiple validation
// errors returned by CreateMakeStepsResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateMakeStepsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMakeStepsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMakeStepsResponseMultiError) AllErrors() []error { return m }

// CreateMakeStepsResponseValidationError is the validation error returned by
// CreateMakeStepsResponse.Validate if the designated constraints aren't met.
type CreateMakeStepsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMakeStepsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMakeStepsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMakeStepsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMakeStepsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMakeStepsResponseValidationError) ErrorName() string {
	return "CreateMakeStepsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMakeStepsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMakeStepsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMakeStepsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMakeStepsResponseValidationError{}
