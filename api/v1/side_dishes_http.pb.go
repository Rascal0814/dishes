// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.1
// - protoc             (unknown)
// source: api/v1/side_dishes.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationSideDishesServiceCreateSideDishes = "/v1.SideDishesService/CreateSideDishes"
const OperationSideDishesServiceDelSideDishes = "/v1.SideDishesService/DelSideDishes"
const OperationSideDishesServiceGetSideDishes = "/v1.SideDishesService/GetSideDishes"
const OperationSideDishesServiceUpdateSideDishes = "/v1.SideDishesService/UpdateSideDishes"

type SideDishesServiceHTTPServer interface {
	CreateSideDishes(context.Context, *CreateSideDishesRequest) (*CreateSideDishesResponse, error)
	DelSideDishes(context.Context, *DelSideDishesRequest) (*DelSideDishesResponse, error)
	GetSideDishes(context.Context, *GetSideDishesRequest) (*GetSideDishesResponse, error)
	UpdateSideDishes(context.Context, *UpdateSideDishesRequest) (*UpdateSideDishesResponse, error)
}

func RegisterSideDishesServiceHTTPServer(s *http.Server, srv SideDishesServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/side", _SideDishesService_CreateSideDishes0_HTTP_Handler(srv))
	r.PUT("/api/v1/side", _SideDishesService_UpdateSideDishes0_HTTP_Handler(srv))
	r.GET("/api/v1/side/{id}", _SideDishesService_GetSideDishes0_HTTP_Handler(srv))
	r.DELETE("/api/v1/side/del/{id}", _SideDishesService_DelSideDishes0_HTTP_Handler(srv))
}

func _SideDishesService_CreateSideDishes0_HTTP_Handler(srv SideDishesServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateSideDishesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSideDishesServiceCreateSideDishes)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateSideDishes(ctx, req.(*CreateSideDishesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateSideDishesResponse)
		return ctx.Result(200, reply)
	}
}

func _SideDishesService_UpdateSideDishes0_HTTP_Handler(srv SideDishesServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateSideDishesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSideDishesServiceUpdateSideDishes)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateSideDishes(ctx, req.(*UpdateSideDishesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateSideDishesResponse)
		return ctx.Result(200, reply)
	}
}

func _SideDishesService_GetSideDishes0_HTTP_Handler(srv SideDishesServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSideDishesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSideDishesServiceGetSideDishes)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSideDishes(ctx, req.(*GetSideDishesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetSideDishesResponse)
		return ctx.Result(200, reply)
	}
}

func _SideDishesService_DelSideDishes0_HTTP_Handler(srv SideDishesServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DelSideDishesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSideDishesServiceDelSideDishes)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DelSideDishes(ctx, req.(*DelSideDishesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DelSideDishesResponse)
		return ctx.Result(200, reply)
	}
}

type SideDishesServiceHTTPClient interface {
	CreateSideDishes(ctx context.Context, req *CreateSideDishesRequest, opts ...http.CallOption) (rsp *CreateSideDishesResponse, err error)
	DelSideDishes(ctx context.Context, req *DelSideDishesRequest, opts ...http.CallOption) (rsp *DelSideDishesResponse, err error)
	GetSideDishes(ctx context.Context, req *GetSideDishesRequest, opts ...http.CallOption) (rsp *GetSideDishesResponse, err error)
	UpdateSideDishes(ctx context.Context, req *UpdateSideDishesRequest, opts ...http.CallOption) (rsp *UpdateSideDishesResponse, err error)
}

type SideDishesServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewSideDishesServiceHTTPClient(client *http.Client) SideDishesServiceHTTPClient {
	return &SideDishesServiceHTTPClientImpl{client}
}

func (c *SideDishesServiceHTTPClientImpl) CreateSideDishes(ctx context.Context, in *CreateSideDishesRequest, opts ...http.CallOption) (*CreateSideDishesResponse, error) {
	var out CreateSideDishesResponse
	pattern := "/api/v1/side"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSideDishesServiceCreateSideDishes))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SideDishesServiceHTTPClientImpl) DelSideDishes(ctx context.Context, in *DelSideDishesRequest, opts ...http.CallOption) (*DelSideDishesResponse, error) {
	var out DelSideDishesResponse
	pattern := "/api/v1/side/del/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSideDishesServiceDelSideDishes))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SideDishesServiceHTTPClientImpl) GetSideDishes(ctx context.Context, in *GetSideDishesRequest, opts ...http.CallOption) (*GetSideDishesResponse, error) {
	var out GetSideDishesResponse
	pattern := "/api/v1/side/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSideDishesServiceGetSideDishes))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SideDishesServiceHTTPClientImpl) UpdateSideDishes(ctx context.Context, in *UpdateSideDishesRequest, opts ...http.CallOption) (*UpdateSideDishesResponse, error) {
	var out UpdateSideDishesResponse
	pattern := "/api/v1/side"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSideDishesServiceUpdateSideDishes))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
