// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             (unknown)
// source: api/v1/dishes.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationDishesServiceCreateDishes = "/v1.DishesService/CreateDishes"
const OperationDishesServiceDelDishes = "/v1.DishesService/DelDishes"
const OperationDishesServiceGetDishes = "/v1.DishesService/GetDishes"
const OperationDishesServiceListDishes = "/v1.DishesService/ListDishes"
const OperationDishesServiceUpdateDishes = "/v1.DishesService/UpdateDishes"

type DishesServiceHTTPServer interface {
	CreateDishes(context.Context, *CreateDishesRequest) (*CreateDishesResponse, error)
	DelDishes(context.Context, *DelDishesRequest) (*DelDishesResponse, error)
	GetDishes(context.Context, *GetDishesRequest) (*GetDishesResponse, error)
	ListDishes(context.Context, *ListDishesRequest) (*ListDishesResponse, error)
	UpdateDishes(context.Context, *UpdateDishesRequest) (*UpdateDishesResponse, error)
}

func RegisterDishesServiceHTTPServer(s *http.Server, srv DishesServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/dish/create", _DishesService_CreateDishes0_HTTP_Handler(srv))
	r.GET("/api/v1/dish/get/{id}", _DishesService_GetDishes0_HTTP_Handler(srv))
	r.DELETE("/api/v1/dish/delete/{id}", _DishesService_DelDishes0_HTTP_Handler(srv))
	r.PUT("/api/v1/dish/update", _DishesService_UpdateDishes0_HTTP_Handler(srv))
	r.GET("/api/v1/dish/list", _DishesService_ListDishes0_HTTP_Handler(srv))
}

func _DishesService_CreateDishes0_HTTP_Handler(srv DishesServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateDishesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDishesServiceCreateDishes)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateDishes(ctx, req.(*CreateDishesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateDishesResponse)
		return ctx.Result(200, reply)
	}
}

func _DishesService_GetDishes0_HTTP_Handler(srv DishesServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDishesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDishesServiceGetDishes)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDishes(ctx, req.(*GetDishesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetDishesResponse)
		return ctx.Result(200, reply)
	}
}

func _DishesService_DelDishes0_HTTP_Handler(srv DishesServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DelDishesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDishesServiceDelDishes)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DelDishes(ctx, req.(*DelDishesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DelDishesResponse)
		return ctx.Result(200, reply)
	}
}

func _DishesService_UpdateDishes0_HTTP_Handler(srv DishesServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateDishesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDishesServiceUpdateDishes)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateDishes(ctx, req.(*UpdateDishesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateDishesResponse)
		return ctx.Result(200, reply)
	}
}

func _DishesService_ListDishes0_HTTP_Handler(srv DishesServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListDishesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDishesServiceListDishes)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListDishes(ctx, req.(*ListDishesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListDishesResponse)
		return ctx.Result(200, reply)
	}
}

type DishesServiceHTTPClient interface {
	CreateDishes(ctx context.Context, req *CreateDishesRequest, opts ...http.CallOption) (rsp *CreateDishesResponse, err error)
	DelDishes(ctx context.Context, req *DelDishesRequest, opts ...http.CallOption) (rsp *DelDishesResponse, err error)
	GetDishes(ctx context.Context, req *GetDishesRequest, opts ...http.CallOption) (rsp *GetDishesResponse, err error)
	ListDishes(ctx context.Context, req *ListDishesRequest, opts ...http.CallOption) (rsp *ListDishesResponse, err error)
	UpdateDishes(ctx context.Context, req *UpdateDishesRequest, opts ...http.CallOption) (rsp *UpdateDishesResponse, err error)
}

type DishesServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewDishesServiceHTTPClient(client *http.Client) DishesServiceHTTPClient {
	return &DishesServiceHTTPClientImpl{client}
}

func (c *DishesServiceHTTPClientImpl) CreateDishes(ctx context.Context, in *CreateDishesRequest, opts ...http.CallOption) (*CreateDishesResponse, error) {
	var out CreateDishesResponse
	pattern := "/api/v1/dish/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDishesServiceCreateDishes))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DishesServiceHTTPClientImpl) DelDishes(ctx context.Context, in *DelDishesRequest, opts ...http.CallOption) (*DelDishesResponse, error) {
	var out DelDishesResponse
	pattern := "/api/v1/dish/delete/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDishesServiceDelDishes))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DishesServiceHTTPClientImpl) GetDishes(ctx context.Context, in *GetDishesRequest, opts ...http.CallOption) (*GetDishesResponse, error) {
	var out GetDishesResponse
	pattern := "/api/v1/dish/get/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDishesServiceGetDishes))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DishesServiceHTTPClientImpl) ListDishes(ctx context.Context, in *ListDishesRequest, opts ...http.CallOption) (*ListDishesResponse, error) {
	var out ListDishesResponse
	pattern := "/api/v1/dish/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDishesServiceListDishes))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DishesServiceHTTPClientImpl) UpdateDishes(ctx context.Context, in *UpdateDishesRequest, opts ...http.CallOption) (*UpdateDishesResponse, error) {
	var out UpdateDishesResponse
	pattern := "/api/v1/dish/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDishesServiceUpdateDishes))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
