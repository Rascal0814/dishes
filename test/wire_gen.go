// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package test

import (
	config2 "dishes/order-dishes/config"
	"dishes/order-dishes/internal/dao"
	"dishes/order-dishes/internal/dto"
	"dishes/order-dishes/internal/service"
	"flag"
	"github.com/Rascal0814/boot/config"
	"github.com/Rascal0814/boot/log"
	"github.com/Rascal0814/boot/snowflake"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(serviceName log.ServiceName, confPath config.CPath) (*TestApp, error) {
	configConfig, err2 := config2.NewConfig(confPath)
	if err2 != nil {
		return nil, err
	}
	db := config.DefaultDB(configConfig)
	logger := log.NewLogger(serviceName)
	dishDao := dao.NewDishDao(db, logger)
	dtoDto := dto.NewDto()
	snowflakeSnowflake, err2 := snowflake.NewSnowflake()
	if err2 != nil {
		return nil, err
	}
	dishesService := service.NewDishesService(dishDao, logger, dtoDto, snowflakeSnowflake)
	orderDao := dao.NewOrderDao(db, logger)
	orderService := service.NewOrderService(orderDao, logger, dtoDto, snowflakeSnowflake)
	makeStepDao := dao.NewMakeStepDao(db, logger)
	makeStepsService := service.NewMakeStepsService(makeStepDao, logger, dtoDto, snowflakeSnowflake)
	testApp, err2 := newTestApp(dishesService, orderService, makeStepsService, configConfig, logger)
	if err2 != nil {
		return nil, err
	}
	return testApp, nil
}

// wire.go:

type TestApp struct {
	Dishes   *service.DishesService
	Orders   *service.OrderService
	MakeStep *service.MakeStepsService
	Config   *config.Config
	log      *log.Logger
}

func newTestApp(Dishes *service.DishesService, Orders *service.OrderService, MakeStep *service.MakeStepsService, Config *config.Config, log2 *log.Logger) (*TestApp, error) {
	return &TestApp{
		Dishes:   Dishes,
		Orders:   Orders,
		MakeStep: MakeStep,
		Config:   Config,
		log:      log2,
	}, nil
}

var (
	app      *TestApp
	err      error
	flagConf string
)

func init() {
	flag.StringVar(&flagConf, "conf", "../config", "config path, eg: -conf config.yaml")
	app, err = wireApp(log.ServiceName("test"), config.CPath(flagConf))
	if err != nil {
		panic(err)
	}
}
